#cloud-config

users:
  - name: user
    lock_passwd: false
    passwd: "$y$j9T$ybdjFbChrTwxHVcMWteJZ1$wRZJ2osGXMnzY1uQ3cN1EdEEMef2qM.3XwSvUPS8Hq6"
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDZgBuA47ycWCP1GGw2ApW4VeTWHBDjddw84w4GLP39KX6fxxq7JXEwmkrCMluYfIjT307WF/2Bi63eLEAakPJOppU4bs6i8bdJfve8DbBBqWwHTLqKMu9RSF8+Ff1s6GzZDsjMzFcFyVghjs2TY4TDtTVGnBz+5DIllKNpW0cCPIjcKyG6AB5Arb09YAX7e9t6eoknQWKnrY401kpKWrrfiNpI/sJ9F+AhSQi8A0gMveqgwNob0bxnWDtNOaukoXrgiuED0WjZFkBiHle4HRI3g4/xJh3nsuW/62fdVn+5ry3fnMjZy1YIbo2RnDLvfAzgOkowC04TRYITIsofZ5vLKV8JhqjiLBU1t+jJk2VurVk1i+CO/E2H52MpprqWTyBdZNPgpVYj6Rq/QKm3elOn+psTHAz1VE/0Td3QRoQ8Qv1Fzst6eRlfjbm7mP1ucyTIlU496MunS2ABbnCtoyVTekDqHsKAk/cWxBQavxnBIzTEbnVr2A4Ol32awyPkzTbcsw+j7PaZSKIgisAv0YD8l5WqpZ6CU1o+hcaMVoxn7JG7EwWiX7hL+hC+9f4VEXVtWPAv3ru9CZqdzMlneKRbIq+yJymXABvtuLmavbEp1GDldntXqBS6ZbgqWwDIf1b55FgRHglo9AP+EZgvYPFPInwmh+dqiwy3wWrtm8uerQ== master@localhost -p 5253, suse
    sudo: ALL=(ALL) NOPASSWD:ALL

ssh_pwauth: true

package_update: true
package_upgrade: true

packages:
  - openssh-server
  - curl
  - nmap 
  - ansible 
  - golang-go
  - python3-pip

runcmd:
    
  #ssh 
  - [ systemctl, enable, ssh ]
  - [ systemctl, start, ssh ]

#Helm
  - 'sudo -i -u user bash -c "pip3 install openshift kubernetes"'
  - 'sudo -i -u user bash -c "ansible-galaxy collection install kubernetes.core"'
  - 'sudo -i -u user bash -c "curl -fsSL -o /home/user/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"'
  - 'sudo -i -u user bash -c "chmod 770 /home/user/get_helm.sh && /home/user/get_helm.sh"'
  # Wait for Helm to be installed and ready
  - |
    echo -n "Waiting for Helm installation to complete..."
    until helm version &> /dev/null; do
    echo "."
    sleep 1
    done
    echo 
    echo "Helm is installed and ready!"
    
# update ansible and install packages
  - 'sudo -i -u user pip install --upgrade ansible'
  - 'sudo -i -u user ansible-galaxy collection install community.grafana'
  - 'sudo -i -u user helm repo add prometheus-community https://prometheus-community.github.io/helm-charts'
  - 'sudo -i -u user helm repo update'
  - 'sudo -i -u user helm repo add grafana https://grafana.github.io/helm-charts'
  - 'sudo -i -u user helm repo update'

# mount cdrom with resources 
  - 'sudo mount /dev/cdrom /mnt'

# Run Ansible play book to deploy lab
  - 'sudo -i -u user ansible-playbook -i /mnt/files/ansible/inventory/hosts.ini /mnt/files/ansible/k3s_lab_setup_new.yaml'
  - 'sudo -i -u user ansible-playbook -i /mnt/files/ansible/inventory/hosts.ini /mnt/files/ansible/rook_ceph_install_new.yaml'
  - 'sudo -i -u user ansible-playbook -i /mnt/files/ansible/inventory/hosts.ini /mnt/files/ansible/deployment_grafana_new.yaml'

  # Prometheus
  - 'sudo -i -u user helm install prometheus prometheus-community/prometheus --namespace monitoring'
  - 'sudo -i -u user helm upgrade prometheus prometheus-community/prometheus --namespace monitoring --set server.service.type=NodePort --set server.service.nodePort=30900  --set server.service.port=9090 --set server.service.targetPort=9090'
 
  # Swagger-petstore
  - 'sudo -i -u user helm upgrade --install swagger-petstore oci://ghcr.io/securecodebox/helm/swagger-petstore --namespace petstore --create-namespace'
 
  # Primtail
  #- 'sudo -i -u user helm install '
  - 'sudo -i -u user helm install promtail grafana/promtail -n monitoring'
  - 'sudo -i -u user kubectl apply -f /mnt/files/promtail_svc.yaml'
  # Loki
  - 'sudo -i -u user helm install loki grafana/loki-distributed -n monitoring'
# http://loki-loki-distributed-query-frontend.monitoring:3100


 
  # Finalisation
  - 'sudo -i -u user kubectl get pods --all-namespaces'
  - 'sudo -i -u user kubectl get namespaces'

final_message: "Cloud-init finished."

# kubectl run -it -rm debug --image=busybox --restart=Never -- sh

## K3S
#  - 'sudo -i -u user bash -c "curl -sfL https://get.k3s.io | sh -"'
#  - 'sudo chmod 644 /etc/rancher/k3s/k3s.yaml'
#  - 'sudo chown user:user /etc/rancher/k3s/k3s.yaml'
#
#  # Set up kubeconfig for 'user'
#  - 'sudo mkdir -p /home/user/.kube'
#  - 'sudo cp /etc/rancher/k3s/k3s.yaml /home/user/.kube/config'
#  - 'sudo chown user:user /home/user/.kube/config'
#  - 'sudo chmod 600 /home/user/.kube/config'
#    
#  #rook-ceph
#  - 'sudo -i -u user bash -c "export PATH=$PATH:/usr/local/bin; until kubectl get nodes; do sleep 5; done"'
#
#  - 'sudo -i -u user git clone --single-branch  https://github.com/rook/rook.git /home/user/rook'
#  - 'sudo -i -u user sed -i "s/^\(\s*\)count: 3/\1count: 1/" /home/user/rook/deploy/examples/cluster.yaml'
#
#  - 'sudo -i -u user kubectl apply -f /home/user/rook/deploy/examples/crds.yaml'
#  - 'sudo -i -u user kubectl apply -f /home/user/rook/deploy/examples/common.yaml'
#  - 'sudo -i -u user kubectl apply -f /home/user/rook/deploy/examples/operator.yaml'
#
#  # wait for rook-ceph to finish installation
#  - 'sudo -i -u user kubectl -n rook-ceph rollout status deploy/rook-ceph-operator'
#  - 'sudo -i -u user kubectl apply -f /home/user/rook/deploy/examples/cluster.yaml'
#  
#  - |
#    echo -n "Waiting for CephCluster to become ready..."
#    until kubectl -n rook-ceph get cephcluster rook-ceph -o jsonpath='{.status.phase}' | grep -q "Ready"; do
#      echo -n "."
#      sleep 1
#    done
#    echo 
#    echo "CephCluster is now ready!"
#
#  #- 'kubectl -n rook-ceph get cephcluster -o wide --watch'
#
#  - 'sudo -i -u user kubectl apply -f /home/user/rook/deploy/examples/toolbox.yaml'
#
#  # Wait for the toolbox pod to be ready
#  - 'sudo -i -u user kubectl -n rook-ceph rollout status deploy/rook-ceph-tools'
#
#  # Wait until the .mgr pool exists
#  - |
#    echo -n "Waiting for .mgr pool to be created..."
#    until sudo -i -u user kubectl -n rook-ceph exec deploy/rook-ceph-tools -- ceph osd pool ls | grep -q '^\.mgr$'; do
#      echo -n "."
#      sleep 1
#    done
#
#  # Change replication rules, to make it work as a single node
#  - 'sudo -i -u user kubectl -n rook-ceph exec deploy/rook-ceph-tools -- ceph osd crush rule create-replicated replicated_rule_osd default osd'
#  - 'sudo -i -u user kubectl -n rook-ceph exec deploy/rook-ceph-tools -- ceph osd pool set .mgr crush_rule replicated_rule_osd'
#
#  # Prometheus
#  - 'sudo -i -u user git clone https://github.com/prometheus-operator/kube-prometheus.git'
#  - 'sudo -i -u user kubectl apply --server-side -f kube-prometheus/manifests/setup'
#  - |
#      echo -n "Waiting for CRDs to be created..."
#      while ! kubectl get crd alertmanagers.monitoring.coreos.com prometheuses.monitoring.coreos.com servicemonitors.monitoring.coreos.com > /dev/null 2>&1; do
#        echo -n "."
#        sleep 1
#      done
#      echo
#  - 'sudo -i -u user kubectl apply -f kube-prometheus/manifests/'
#
#  # Graphana
#  - 'sudo -i -u user kubectl create namespace grafana'
#  - 'sudo -i -u user kubectl apply -f /mnt/files/grafana.yaml --namespace=grafana'
#
#  # Installing Swagger/petstore
#  #- 'sudo -i -u user helm install petstore /mnt/files/petstore -n petstore --create-namespace'
#  - ' sudo -i -u user helm upgrade --install swagger-petstore oci://ghcr.io/securecodebox/helm/swagger-petstore --namespace petstore --create-namespace'


