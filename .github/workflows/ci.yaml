name: CI - Setup Cluster in VM Lab

on:
  push:
    branches:
      - ansible
  pull_request:
    branches:
      - ansible

jobs:
  setup-cluster:
    runs-on: self-hosted  # Use your self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive 

      - name: Prepare and Start VM Lab
        id: wait_for_cluster
        run: |
          make start_lab
      
      - name: Wait for VM to be Reachable          
        run: |
          timeout=300  
          start_time=$(date +%s)
          while ! ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 -p 8022 user@localhost 'echo "VM is ready"'; do
            echo "Waiting for SSH to be available..."
            sleep 5
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [[ $elapsed -ge $timeout ]]; then
              echo "Timed out waiting for SSH to be available."
              exit 1
            fi
          done
          echo "VM is reachable!"

      - name: Wait for Cluster Setup
        run: |
          cloud_init_status=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 8022 user@localhost 'cloud-init status --wait' 2>&1)
          grep "done" <<< "$cloud_init_status"
          if ! grep -q "done" <<< "$cloud_init_status" ; then
            echo "Cloud-init failed or did not complete successfully."
            echo "Details: $cloud_init_status"
            exit 1
          fi
          echo "Cloud-init completed successfully!"

      - name: Display Cloud-Init Logs on Failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 8022 user@localhost 'sudo tail -n 50 /var/log/cloud-init.log'

      - name: Verify Cluster Deployment
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 8022 user@localhost "bash -s" < ./full-test.sh
